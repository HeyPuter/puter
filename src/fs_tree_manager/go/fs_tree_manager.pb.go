// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: fs_tree_manager.proto

package fs_tree_manager

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FetchReplicaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchReplicaRequest) Reset() {
	*x = FetchReplicaRequest{}
	mi := &file_fs_tree_manager_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchReplicaRequest) ProtoMessage() {}

func (x *FetchReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fs_tree_manager_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchReplicaRequest.ProtoReflect.Descriptor instead.
func (*FetchReplicaRequest) Descriptor() ([]byte, []int) {
	return file_fs_tree_manager_proto_rawDescGZIP(), []int{0}
}

func (x *FetchReplicaRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type NewFSEntryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FsEntry       *FSEntry               `protobuf:"bytes,2,opt,name=fs_entry,json=fsEntry,proto3" json:"fs_entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewFSEntryRequest) Reset() {
	*x = NewFSEntryRequest{}
	mi := &file_fs_tree_manager_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewFSEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewFSEntryRequest) ProtoMessage() {}

func (x *NewFSEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fs_tree_manager_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewFSEntryRequest.ProtoReflect.Descriptor instead.
func (*NewFSEntryRequest) Descriptor() ([]byte, []int) {
	return file_fs_tree_manager_proto_rawDescGZIP(), []int{1}
}

func (x *NewFSEntryRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *NewFSEntryRequest) GetFsEntry() *FSEntry {
	if x != nil {
		return x.FsEntry
	}
	return nil
}

type RemoveFSEntryRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	UserId int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Use UUID instead of FSEntry since:
	// 1. UUID is enough to identify a node
	// 2. FSEntry is inaccessable in many cases
	Uuid          string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveFSEntryRequest) Reset() {
	*x = RemoveFSEntryRequest{}
	mi := &file_fs_tree_manager_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveFSEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFSEntryRequest) ProtoMessage() {}

func (x *RemoveFSEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fs_tree_manager_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFSEntryRequest.ProtoReflect.Descriptor instead.
func (*RemoveFSEntryRequest) Descriptor() ([]byte, []int) {
	return file_fs_tree_manager_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveFSEntryRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RemoveFSEntryRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type PurgeReplicaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PurgeReplicaRequest) Reset() {
	*x = PurgeReplicaRequest{}
	mi := &file_fs_tree_manager_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurgeReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeReplicaRequest) ProtoMessage() {}

func (x *PurgeReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fs_tree_manager_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeReplicaRequest.ProtoReflect.Descriptor instead.
func (*PurgeReplicaRequest) Descriptor() ([]byte, []int) {
	return file_fs_tree_manager_proto_rawDescGZIP(), []int{3}
}

func (x *PurgeReplicaRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type MerkleNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// We use the stable uuid from fs_entry so pointers to it stay valid when this
	// node is updated.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// We use string instead of uint64 for several reasons:
	//  1. JS is error prone when handling uint64/bigint and it's time-consuming to
	//     troubleshoot.
	//  2. It's easier to come up with a consistent order on string type.
	MerkleHash string `protobuf:"bytes,2,opt,name=merkle_hash,json=merkleHash,proto3" json:"merkle_hash,omitempty"`
	// Use map to avoid duplicate children uuids. The value doesn't matter, it's
	// there just because protobuf doesn't have built-in set type.
	ChildrenUuids map[string]bool `protobuf:"bytes,3,rep,name=children_uuids,json=childrenUuids,proto3" json:"children_uuids,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ParentUuid    string          `protobuf:"bytes,4,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty"`
	FsEntry       *FSEntry        `protobuf:"bytes,5,opt,name=fs_entry,json=fsEntry,proto3" json:"fs_entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MerkleNode) Reset() {
	*x = MerkleNode{}
	mi := &file_fs_tree_manager_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MerkleNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleNode) ProtoMessage() {}

func (x *MerkleNode) ProtoReflect() protoreflect.Message {
	mi := &file_fs_tree_manager_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleNode.ProtoReflect.Descriptor instead.
func (*MerkleNode) Descriptor() ([]byte, []int) {
	return file_fs_tree_manager_proto_rawDescGZIP(), []int{4}
}

func (x *MerkleNode) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *MerkleNode) GetMerkleHash() string {
	if x != nil {
		return x.MerkleHash
	}
	return ""
}

func (x *MerkleNode) GetChildrenUuids() map[string]bool {
	if x != nil {
		return x.ChildrenUuids
	}
	return nil
}

func (x *MerkleNode) GetParentUuid() string {
	if x != nil {
		return x.ParentUuid
	}
	return ""
}

func (x *MerkleNode) GetFsEntry() *FSEntry {
	if x != nil {
		return x.FsEntry
	}
	return nil
}

// The motivation of the heap design instead of embedded trees is elaborated in
// the RFC (doc/RFCS/20250821_client_replica_file_system.md)
type MerkleTree struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	RootUuid string                 `protobuf:"bytes,1,opt,name=root_uuid,json=rootUuid,proto3" json:"root_uuid,omitempty"`
	// uuid -> node
	Nodes         map[string]*MerkleNode `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MerkleTree) Reset() {
	*x = MerkleTree{}
	mi := &file_fs_tree_manager_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MerkleTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleTree) ProtoMessage() {}

func (x *MerkleTree) ProtoReflect() protoreflect.Message {
	mi := &file_fs_tree_manager_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleTree.ProtoReflect.Descriptor instead.
func (*MerkleTree) Descriptor() ([]byte, []int) {
	return file_fs_tree_manager_proto_rawDescGZIP(), []int{5}
}

func (x *MerkleTree) GetRootUuid() string {
	if x != nil {
		return x.RootUuid
	}
	return ""
}

func (x *MerkleTree) GetNodes() map[string]*MerkleNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type FSEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO (xiaochen): Make it a static type step by step.
	//
	// A static type is more robust and less error-prone. For instance, a
	// FSEntry has uuid field in database but uid is desired in the puter-js
	// and GUI client. We can guarantee the presence of desired fields by
	// using a static type.
	Metadata      *structpb.Struct `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FSEntry) Reset() {
	*x = FSEntry{}
	mi := &file_fs_tree_manager_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FSEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FSEntry) ProtoMessage() {}

func (x *FSEntry) ProtoReflect() protoreflect.Message {
	mi := &file_fs_tree_manager_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FSEntry.ProtoReflect.Descriptor instead.
func (*FSEntry) Descriptor() ([]byte, []int) {
	return file_fs_tree_manager_proto_rawDescGZIP(), []int{6}
}

func (x *FSEntry) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type PullRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PullRequest   []*PullRequestItem     `protobuf:"bytes,2,rep,name=pull_request,json=pullRequest,proto3" json:"pull_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullRequest) Reset() {
	*x = PullRequest{}
	mi := &file_fs_tree_manager_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequest) ProtoMessage() {}

func (x *PullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fs_tree_manager_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequest.ProtoReflect.Descriptor instead.
func (*PullRequest) Descriptor() ([]byte, []int) {
	return file_fs_tree_manager_proto_rawDescGZIP(), []int{7}
}

func (x *PullRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PullRequest) GetPullRequest() []*PullRequestItem {
	if x != nil {
		return x.PullRequest
	}
	return nil
}

type PullRequestItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	MerkleHash    string                 `protobuf:"bytes,2,opt,name=merkle_hash,json=merkleHash,proto3" json:"merkle_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullRequestItem) Reset() {
	*x = PullRequestItem{}
	mi := &file_fs_tree_manager_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullRequestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequestItem) ProtoMessage() {}

func (x *PullRequestItem) ProtoReflect() protoreflect.Message {
	mi := &file_fs_tree_manager_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequestItem.ProtoReflect.Descriptor instead.
func (*PullRequestItem) Descriptor() ([]byte, []int) {
	return file_fs_tree_manager_proto_rawDescGZIP(), []int{8}
}

func (x *PullRequestItem) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PullRequestItem) GetMerkleHash() string {
	if x != nil {
		return x.MerkleHash
	}
	return ""
}

type PushRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PushRequest   []*PushRequestItem     `protobuf:"bytes,2,rep,name=push_request,json=pushRequest,proto3" json:"push_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushRequest) Reset() {
	*x = PushRequest{}
	mi := &file_fs_tree_manager_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushRequest) ProtoMessage() {}

func (x *PushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fs_tree_manager_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushRequest.ProtoReflect.Descriptor instead.
func (*PushRequest) Descriptor() ([]byte, []int) {
	return file_fs_tree_manager_proto_rawDescGZIP(), []int{9}
}

func (x *PushRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PushRequest) GetPushRequest() []*PushRequestItem {
	if x != nil {
		return x.PushRequest
	}
	return nil
}

type PushRequestItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	MerkleHash    string                 `protobuf:"bytes,2,opt,name=merkle_hash,json=merkleHash,proto3" json:"merkle_hash,omitempty"`
	FsEntry       *FSEntry               `protobuf:"bytes,3,opt,name=fs_entry,json=fsEntry,proto3" json:"fs_entry,omitempty"`
	Children      []*PushRequestItem     `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushRequestItem) Reset() {
	*x = PushRequestItem{}
	mi := &file_fs_tree_manager_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushRequestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushRequestItem) ProtoMessage() {}

func (x *PushRequestItem) ProtoReflect() protoreflect.Message {
	mi := &file_fs_tree_manager_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushRequestItem.ProtoReflect.Descriptor instead.
func (*PushRequestItem) Descriptor() ([]byte, []int) {
	return file_fs_tree_manager_proto_rawDescGZIP(), []int{10}
}

func (x *PushRequestItem) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PushRequestItem) GetMerkleHash() string {
	if x != nil {
		return x.MerkleHash
	}
	return ""
}

func (x *PushRequestItem) GetFsEntry() *FSEntry {
	if x != nil {
		return x.FsEntry
	}
	return nil
}

func (x *PushRequestItem) GetChildren() []*PushRequestItem {
	if x != nil {
		return x.Children
	}
	return nil
}

var File_fs_tree_manager_proto protoreflect.FileDescriptor

const file_fs_tree_manager_proto_rawDesc = "" +
	"\n" +
	"\x15fs_tree_manager.proto\x12\x0ffs_tree_manager\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1bgoogle/protobuf/empty.proto\".\n" +
	"\x13FetchReplicaRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\"a\n" +
	"\x11NewFSEntryRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x123\n" +
	"\bfs_entry\x18\x02 \x01(\v2\x18.fs_tree_manager.FSEntryR\afsEntry\"C\n" +
	"\x14RemoveFSEntryRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x12\n" +
	"\x04uuid\x18\x02 \x01(\tR\x04uuid\".\n" +
	"\x13PurgeReplicaRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\"\xb0\x02\n" +
	"\n" +
	"MerkleNode\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x12\x1f\n" +
	"\vmerkle_hash\x18\x02 \x01(\tR\n" +
	"merkleHash\x12U\n" +
	"\x0echildren_uuids\x18\x03 \x03(\v2..fs_tree_manager.MerkleNode.ChildrenUuidsEntryR\rchildrenUuids\x12\x1f\n" +
	"\vparent_uuid\x18\x04 \x01(\tR\n" +
	"parentUuid\x123\n" +
	"\bfs_entry\x18\x05 \x01(\v2\x18.fs_tree_manager.FSEntryR\afsEntry\x1a@\n" +
	"\x12ChildrenUuidsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\xbe\x01\n" +
	"\n" +
	"MerkleTree\x12\x1b\n" +
	"\troot_uuid\x18\x01 \x01(\tR\brootUuid\x12<\n" +
	"\x05nodes\x18\x02 \x03(\v2&.fs_tree_manager.MerkleTree.NodesEntryR\x05nodes\x1aU\n" +
	"\n" +
	"NodesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.fs_tree_manager.MerkleNodeR\x05value:\x028\x01\">\n" +
	"\aFSEntry\x123\n" +
	"\bmetadata\x18\x01 \x01(\v2\x17.google.protobuf.StructR\bmetadata\"k\n" +
	"\vPullRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12C\n" +
	"\fpull_request\x18\x02 \x03(\v2 .fs_tree_manager.PullRequestItemR\vpullRequest\"F\n" +
	"\x0fPullRequestItem\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x12\x1f\n" +
	"\vmerkle_hash\x18\x02 \x01(\tR\n" +
	"merkleHash\"k\n" +
	"\vPushRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12C\n" +
	"\fpush_request\x18\x02 \x03(\v2 .fs_tree_manager.PushRequestItemR\vpushRequest\"\xb9\x01\n" +
	"\x0fPushRequestItem\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x12\x1f\n" +
	"\vmerkle_hash\x18\x02 \x01(\tR\n" +
	"merkleHash\x123\n" +
	"\bfs_entry\x18\x03 \x01(\v2\x18.fs_tree_manager.FSEntryR\afsEntry\x12<\n" +
	"\bchildren\x18\x04 \x03(\v2 .fs_tree_manager.PushRequestItemR\bchildren2\x92\x03\n" +
	"\rFSTreeManager\x12Q\n" +
	"\fFetchReplica\x12$.fs_tree_manager.FetchReplicaRequest\x1a\x1b.fs_tree_manager.MerkleTree\x12F\n" +
	"\bPullDiff\x12\x1c.fs_tree_manager.PullRequest\x1a\x1c.fs_tree_manager.PushRequest\x12H\n" +
	"\n" +
	"NewFSEntry\x12\".fs_tree_manager.NewFSEntryRequest\x1a\x16.google.protobuf.Empty\x12N\n" +
	"\rRemoveFSEntry\x12%.fs_tree_manager.RemoveFSEntryRequest\x1a\x16.google.protobuf.Empty\x12L\n" +
	"\fPurgeReplica\x12$.fs_tree_manager.PurgeReplicaRequest\x1a\x16.google.protobuf.EmptyB\"Z github.com/puter/fs_tree_managerb\x06proto3"

var (
	file_fs_tree_manager_proto_rawDescOnce sync.Once
	file_fs_tree_manager_proto_rawDescData []byte
)

func file_fs_tree_manager_proto_rawDescGZIP() []byte {
	file_fs_tree_manager_proto_rawDescOnce.Do(func() {
		file_fs_tree_manager_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_fs_tree_manager_proto_rawDesc), len(file_fs_tree_manager_proto_rawDesc)))
	})
	return file_fs_tree_manager_proto_rawDescData
}

var file_fs_tree_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_fs_tree_manager_proto_goTypes = []any{
	(*FetchReplicaRequest)(nil),  // 0: fs_tree_manager.FetchReplicaRequest
	(*NewFSEntryRequest)(nil),    // 1: fs_tree_manager.NewFSEntryRequest
	(*RemoveFSEntryRequest)(nil), // 2: fs_tree_manager.RemoveFSEntryRequest
	(*PurgeReplicaRequest)(nil),  // 3: fs_tree_manager.PurgeReplicaRequest
	(*MerkleNode)(nil),           // 4: fs_tree_manager.MerkleNode
	(*MerkleTree)(nil),           // 5: fs_tree_manager.MerkleTree
	(*FSEntry)(nil),              // 6: fs_tree_manager.FSEntry
	(*PullRequest)(nil),          // 7: fs_tree_manager.PullRequest
	(*PullRequestItem)(nil),      // 8: fs_tree_manager.PullRequestItem
	(*PushRequest)(nil),          // 9: fs_tree_manager.PushRequest
	(*PushRequestItem)(nil),      // 10: fs_tree_manager.PushRequestItem
	nil,                          // 11: fs_tree_manager.MerkleNode.ChildrenUuidsEntry
	nil,                          // 12: fs_tree_manager.MerkleTree.NodesEntry
	(*structpb.Struct)(nil),      // 13: google.protobuf.Struct
	(*emptypb.Empty)(nil),        // 14: google.protobuf.Empty
}
var file_fs_tree_manager_proto_depIdxs = []int32{
	6,  // 0: fs_tree_manager.NewFSEntryRequest.fs_entry:type_name -> fs_tree_manager.FSEntry
	11, // 1: fs_tree_manager.MerkleNode.children_uuids:type_name -> fs_tree_manager.MerkleNode.ChildrenUuidsEntry
	6,  // 2: fs_tree_manager.MerkleNode.fs_entry:type_name -> fs_tree_manager.FSEntry
	12, // 3: fs_tree_manager.MerkleTree.nodes:type_name -> fs_tree_manager.MerkleTree.NodesEntry
	13, // 4: fs_tree_manager.FSEntry.metadata:type_name -> google.protobuf.Struct
	8,  // 5: fs_tree_manager.PullRequest.pull_request:type_name -> fs_tree_manager.PullRequestItem
	10, // 6: fs_tree_manager.PushRequest.push_request:type_name -> fs_tree_manager.PushRequestItem
	6,  // 7: fs_tree_manager.PushRequestItem.fs_entry:type_name -> fs_tree_manager.FSEntry
	10, // 8: fs_tree_manager.PushRequestItem.children:type_name -> fs_tree_manager.PushRequestItem
	4,  // 9: fs_tree_manager.MerkleTree.NodesEntry.value:type_name -> fs_tree_manager.MerkleNode
	0,  // 10: fs_tree_manager.FSTreeManager.FetchReplica:input_type -> fs_tree_manager.FetchReplicaRequest
	7,  // 11: fs_tree_manager.FSTreeManager.PullDiff:input_type -> fs_tree_manager.PullRequest
	1,  // 12: fs_tree_manager.FSTreeManager.NewFSEntry:input_type -> fs_tree_manager.NewFSEntryRequest
	2,  // 13: fs_tree_manager.FSTreeManager.RemoveFSEntry:input_type -> fs_tree_manager.RemoveFSEntryRequest
	3,  // 14: fs_tree_manager.FSTreeManager.PurgeReplica:input_type -> fs_tree_manager.PurgeReplicaRequest
	5,  // 15: fs_tree_manager.FSTreeManager.FetchReplica:output_type -> fs_tree_manager.MerkleTree
	9,  // 16: fs_tree_manager.FSTreeManager.PullDiff:output_type -> fs_tree_manager.PushRequest
	14, // 17: fs_tree_manager.FSTreeManager.NewFSEntry:output_type -> google.protobuf.Empty
	14, // 18: fs_tree_manager.FSTreeManager.RemoveFSEntry:output_type -> google.protobuf.Empty
	14, // 19: fs_tree_manager.FSTreeManager.PurgeReplica:output_type -> google.protobuf.Empty
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_fs_tree_manager_proto_init() }
func file_fs_tree_manager_proto_init() {
	if File_fs_tree_manager_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_fs_tree_manager_proto_rawDesc), len(file_fs_tree_manager_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fs_tree_manager_proto_goTypes,
		DependencyIndexes: file_fs_tree_manager_proto_depIdxs,
		MessageInfos:      file_fs_tree_manager_proto_msgTypes,
	}.Build()
	File_fs_tree_manager_proto = out.File
	file_fs_tree_manager_proto_goTypes = nil
	file_fs_tree_manager_proto_depIdxs = nil
}
