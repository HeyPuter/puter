// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: fs_tree_manager.proto

package fs_tree_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FSTreeManager_FetchReplica_FullMethodName  = "/fs_tree_manager.FSTreeManager/FetchReplica"
	FSTreeManager_PullDiff_FullMethodName      = "/fs_tree_manager.FSTreeManager/PullDiff"
	FSTreeManager_NewFSEntry_FullMethodName    = "/fs_tree_manager.FSTreeManager/NewFSEntry"
	FSTreeManager_RemoveFSEntry_FullMethodName = "/fs_tree_manager.FSTreeManager/RemoveFSEntry"
	FSTreeManager_PurgeReplica_FullMethodName  = "/fs_tree_manager.FSTreeManager/PurgeReplica"
)

// FSTreeManagerClient is the client API for FSTreeManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// For all RPC requests, user identifier is always needed since replicas are
// stored separately for each user.
//
// We use user_id instead of user_name/user_uuid since it's more accessible:
// - fsentry include user_id but not user_name/user_uuid
// (https://github.com/HeyPuter/puter/blob/847b3a07a4ec59e724063f460a4c26cb62b04d42/src/backend/src/services/database/sqlite_setup/0001_create-tables.sql#L81)
// - user_id is included in the fs events listener where user_name/user_uuid are
// not available
// (https://github.com/HeyPuter/puter/blob/847b3a07a4ec59e724063f460a4c26cb62b04d42/src/backend/src/services/WSPushService.js#L165-L166)
//
// We provide simple {New/Remove}FSEntry APIs as a straightforward way to
// accommodate the wide variety of file system operations. These APIs should
// always results in an coherent MerkleTree.
type FSTreeManagerClient interface {
	FetchReplica(ctx context.Context, in *FetchReplicaRequest, opts ...grpc.CallOption) (*MerkleTree, error)
	PullDiff(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PushRequest, error)
	// Insert a new FSEntry into the tree, update its parent's children list as
	// well.
	NewFSEntry(ctx context.Context, in *NewFSEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Remove an FSEntry (and all its descendants) from the tree, update its
	// parent's children list as well.
	RemoveFSEntry(ctx context.Context, in *RemoveFSEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// For any fs operations that cannot be handled by New/Remove APIs, just purge
	// the replica.
	PurgeReplica(ctx context.Context, in *PurgeReplicaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fSTreeManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFSTreeManagerClient(cc grpc.ClientConnInterface) FSTreeManagerClient {
	return &fSTreeManagerClient{cc}
}

func (c *fSTreeManagerClient) FetchReplica(ctx context.Context, in *FetchReplicaRequest, opts ...grpc.CallOption) (*MerkleTree, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MerkleTree)
	err := c.cc.Invoke(ctx, FSTreeManager_FetchReplica_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fSTreeManagerClient) PullDiff(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PushRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushRequest)
	err := c.cc.Invoke(ctx, FSTreeManager_PullDiff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fSTreeManagerClient) NewFSEntry(ctx context.Context, in *NewFSEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FSTreeManager_NewFSEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fSTreeManagerClient) RemoveFSEntry(ctx context.Context, in *RemoveFSEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FSTreeManager_RemoveFSEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fSTreeManagerClient) PurgeReplica(ctx context.Context, in *PurgeReplicaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FSTreeManager_PurgeReplica_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FSTreeManagerServer is the server API for FSTreeManager service.
// All implementations must embed UnimplementedFSTreeManagerServer
// for forward compatibility.
//
// For all RPC requests, user identifier is always needed since replicas are
// stored separately for each user.
//
// We use user_id instead of user_name/user_uuid since it's more accessible:
// - fsentry include user_id but not user_name/user_uuid
// (https://github.com/HeyPuter/puter/blob/847b3a07a4ec59e724063f460a4c26cb62b04d42/src/backend/src/services/database/sqlite_setup/0001_create-tables.sql#L81)
// - user_id is included in the fs events listener where user_name/user_uuid are
// not available
// (https://github.com/HeyPuter/puter/blob/847b3a07a4ec59e724063f460a4c26cb62b04d42/src/backend/src/services/WSPushService.js#L165-L166)
//
// We provide simple {New/Remove}FSEntry APIs as a straightforward way to
// accommodate the wide variety of file system operations. These APIs should
// always results in an coherent MerkleTree.
type FSTreeManagerServer interface {
	FetchReplica(context.Context, *FetchReplicaRequest) (*MerkleTree, error)
	PullDiff(context.Context, *PullRequest) (*PushRequest, error)
	// Insert a new FSEntry into the tree, update its parent's children list as
	// well.
	NewFSEntry(context.Context, *NewFSEntryRequest) (*emptypb.Empty, error)
	// Remove an FSEntry (and all its descendants) from the tree, update its
	// parent's children list as well.
	RemoveFSEntry(context.Context, *RemoveFSEntryRequest) (*emptypb.Empty, error)
	// For any fs operations that cannot be handled by New/Remove APIs, just purge
	// the replica.
	PurgeReplica(context.Context, *PurgeReplicaRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFSTreeManagerServer()
}

// UnimplementedFSTreeManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFSTreeManagerServer struct{}

func (UnimplementedFSTreeManagerServer) FetchReplica(context.Context, *FetchReplicaRequest) (*MerkleTree, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchReplica not implemented")
}
func (UnimplementedFSTreeManagerServer) PullDiff(context.Context, *PullRequest) (*PushRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullDiff not implemented")
}
func (UnimplementedFSTreeManagerServer) NewFSEntry(context.Context, *NewFSEntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewFSEntry not implemented")
}
func (UnimplementedFSTreeManagerServer) RemoveFSEntry(context.Context, *RemoveFSEntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFSEntry not implemented")
}
func (UnimplementedFSTreeManagerServer) PurgeReplica(context.Context, *PurgeReplicaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeReplica not implemented")
}
func (UnimplementedFSTreeManagerServer) mustEmbedUnimplementedFSTreeManagerServer() {}
func (UnimplementedFSTreeManagerServer) testEmbeddedByValue()                       {}

// UnsafeFSTreeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FSTreeManagerServer will
// result in compilation errors.
type UnsafeFSTreeManagerServer interface {
	mustEmbedUnimplementedFSTreeManagerServer()
}

func RegisterFSTreeManagerServer(s grpc.ServiceRegistrar, srv FSTreeManagerServer) {
	// If the following call pancis, it indicates UnimplementedFSTreeManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FSTreeManager_ServiceDesc, srv)
}

func _FSTreeManager_FetchReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FSTreeManagerServer).FetchReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FSTreeManager_FetchReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FSTreeManagerServer).FetchReplica(ctx, req.(*FetchReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FSTreeManager_PullDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FSTreeManagerServer).PullDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FSTreeManager_PullDiff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FSTreeManagerServer).PullDiff(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FSTreeManager_NewFSEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewFSEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FSTreeManagerServer).NewFSEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FSTreeManager_NewFSEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FSTreeManagerServer).NewFSEntry(ctx, req.(*NewFSEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FSTreeManager_RemoveFSEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFSEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FSTreeManagerServer).RemoveFSEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FSTreeManager_RemoveFSEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FSTreeManagerServer).RemoveFSEntry(ctx, req.(*RemoveFSEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FSTreeManager_PurgeReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FSTreeManagerServer).PurgeReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FSTreeManager_PurgeReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FSTreeManagerServer).PurgeReplica(ctx, req.(*PurgeReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FSTreeManager_ServiceDesc is the grpc.ServiceDesc for FSTreeManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FSTreeManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fs_tree_manager.FSTreeManager",
	HandlerType: (*FSTreeManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchReplica",
			Handler:    _FSTreeManager_FetchReplica_Handler,
		},
		{
			MethodName: "PullDiff",
			Handler:    _FSTreeManager_PullDiff_Handler,
		},
		{
			MethodName: "NewFSEntry",
			Handler:    _FSTreeManager_NewFSEntry_Handler,
		},
		{
			MethodName: "RemoveFSEntry",
			Handler:    _FSTreeManager_RemoveFSEntry_Handler,
		},
		{
			MethodName: "PurgeReplica",
			Handler:    _FSTreeManager_PurgeReplica_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fs_tree_manager.proto",
}
