// source: fs_tree_manager.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.fs_tree_manager.FSEntry', null, global);
goog.exportSymbol('proto.fs_tree_manager.FetchReplicaRequest', null, global);
goog.exportSymbol('proto.fs_tree_manager.MerkleNode', null, global);
goog.exportSymbol('proto.fs_tree_manager.MerkleTree', null, global);
goog.exportSymbol('proto.fs_tree_manager.NewFSEntryRequest', null, global);
goog.exportSymbol('proto.fs_tree_manager.PullRequest', null, global);
goog.exportSymbol('proto.fs_tree_manager.PullRequestItem', null, global);
goog.exportSymbol('proto.fs_tree_manager.PurgeReplicaRequest', null, global);
goog.exportSymbol('proto.fs_tree_manager.PushRequest', null, global);
goog.exportSymbol('proto.fs_tree_manager.PushRequestItem', null, global);
goog.exportSymbol('proto.fs_tree_manager.RemoveFSEntryRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fs_tree_manager.FetchReplicaRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fs_tree_manager.FetchReplicaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fs_tree_manager.FetchReplicaRequest.displayName = 'proto.fs_tree_manager.FetchReplicaRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fs_tree_manager.NewFSEntryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fs_tree_manager.NewFSEntryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fs_tree_manager.NewFSEntryRequest.displayName = 'proto.fs_tree_manager.NewFSEntryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fs_tree_manager.RemoveFSEntryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fs_tree_manager.RemoveFSEntryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fs_tree_manager.RemoveFSEntryRequest.displayName = 'proto.fs_tree_manager.RemoveFSEntryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fs_tree_manager.PurgeReplicaRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fs_tree_manager.PurgeReplicaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fs_tree_manager.PurgeReplicaRequest.displayName = 'proto.fs_tree_manager.PurgeReplicaRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fs_tree_manager.MerkleNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fs_tree_manager.MerkleNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fs_tree_manager.MerkleNode.displayName = 'proto.fs_tree_manager.MerkleNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fs_tree_manager.MerkleTree = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fs_tree_manager.MerkleTree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fs_tree_manager.MerkleTree.displayName = 'proto.fs_tree_manager.MerkleTree';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fs_tree_manager.FSEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fs_tree_manager.FSEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fs_tree_manager.FSEntry.displayName = 'proto.fs_tree_manager.FSEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fs_tree_manager.PullRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fs_tree_manager.PullRequest.repeatedFields_, null);
};
goog.inherits(proto.fs_tree_manager.PullRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fs_tree_manager.PullRequest.displayName = 'proto.fs_tree_manager.PullRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fs_tree_manager.PullRequestItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fs_tree_manager.PullRequestItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fs_tree_manager.PullRequestItem.displayName = 'proto.fs_tree_manager.PullRequestItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fs_tree_manager.PushRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fs_tree_manager.PushRequest.repeatedFields_, null);
};
goog.inherits(proto.fs_tree_manager.PushRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fs_tree_manager.PushRequest.displayName = 'proto.fs_tree_manager.PushRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fs_tree_manager.PushRequestItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fs_tree_manager.PushRequestItem.repeatedFields_, null);
};
goog.inherits(proto.fs_tree_manager.PushRequestItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.fs_tree_manager.PushRequestItem.displayName = 'proto.fs_tree_manager.PushRequestItem';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fs_tree_manager.FetchReplicaRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fs_tree_manager.FetchReplicaRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fs_tree_manager.FetchReplicaRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.FetchReplicaRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fs_tree_manager.FetchReplicaRequest}
 */
proto.fs_tree_manager.FetchReplicaRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fs_tree_manager.FetchReplicaRequest;
  return proto.fs_tree_manager.FetchReplicaRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fs_tree_manager.FetchReplicaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fs_tree_manager.FetchReplicaRequest}
 */
proto.fs_tree_manager.FetchReplicaRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fs_tree_manager.FetchReplicaRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fs_tree_manager.FetchReplicaRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fs_tree_manager.FetchReplicaRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.FetchReplicaRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.fs_tree_manager.FetchReplicaRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fs_tree_manager.FetchReplicaRequest} returns this
 */
proto.fs_tree_manager.FetchReplicaRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fs_tree_manager.NewFSEntryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fs_tree_manager.NewFSEntryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fs_tree_manager.NewFSEntryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.NewFSEntryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fsEntry: (f = msg.getFsEntry()) && proto.fs_tree_manager.FSEntry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fs_tree_manager.NewFSEntryRequest}
 */
proto.fs_tree_manager.NewFSEntryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fs_tree_manager.NewFSEntryRequest;
  return proto.fs_tree_manager.NewFSEntryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fs_tree_manager.NewFSEntryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fs_tree_manager.NewFSEntryRequest}
 */
proto.fs_tree_manager.NewFSEntryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 2:
      var value = new proto.fs_tree_manager.FSEntry;
      reader.readMessage(value,proto.fs_tree_manager.FSEntry.deserializeBinaryFromReader);
      msg.setFsEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fs_tree_manager.NewFSEntryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fs_tree_manager.NewFSEntryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fs_tree_manager.NewFSEntryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.NewFSEntryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getFsEntry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.fs_tree_manager.FSEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.fs_tree_manager.NewFSEntryRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fs_tree_manager.NewFSEntryRequest} returns this
 */
proto.fs_tree_manager.NewFSEntryRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional FSEntry fs_entry = 2;
 * @return {?proto.fs_tree_manager.FSEntry}
 */
proto.fs_tree_manager.NewFSEntryRequest.prototype.getFsEntry = function() {
  return /** @type{?proto.fs_tree_manager.FSEntry} */ (
    jspb.Message.getWrapperField(this, proto.fs_tree_manager.FSEntry, 2));
};


/**
 * @param {?proto.fs_tree_manager.FSEntry|undefined} value
 * @return {!proto.fs_tree_manager.NewFSEntryRequest} returns this
*/
proto.fs_tree_manager.NewFSEntryRequest.prototype.setFsEntry = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fs_tree_manager.NewFSEntryRequest} returns this
 */
proto.fs_tree_manager.NewFSEntryRequest.prototype.clearFsEntry = function() {
  return this.setFsEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fs_tree_manager.NewFSEntryRequest.prototype.hasFsEntry = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fs_tree_manager.RemoveFSEntryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fs_tree_manager.RemoveFSEntryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fs_tree_manager.RemoveFSEntryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.RemoveFSEntryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fs_tree_manager.RemoveFSEntryRequest}
 */
proto.fs_tree_manager.RemoveFSEntryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fs_tree_manager.RemoveFSEntryRequest;
  return proto.fs_tree_manager.RemoveFSEntryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fs_tree_manager.RemoveFSEntryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fs_tree_manager.RemoveFSEntryRequest}
 */
proto.fs_tree_manager.RemoveFSEntryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fs_tree_manager.RemoveFSEntryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fs_tree_manager.RemoveFSEntryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fs_tree_manager.RemoveFSEntryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.RemoveFSEntryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.fs_tree_manager.RemoveFSEntryRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fs_tree_manager.RemoveFSEntryRequest} returns this
 */
proto.fs_tree_manager.RemoveFSEntryRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.fs_tree_manager.RemoveFSEntryRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fs_tree_manager.RemoveFSEntryRequest} returns this
 */
proto.fs_tree_manager.RemoveFSEntryRequest.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fs_tree_manager.PurgeReplicaRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fs_tree_manager.PurgeReplicaRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fs_tree_manager.PurgeReplicaRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.PurgeReplicaRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fs_tree_manager.PurgeReplicaRequest}
 */
proto.fs_tree_manager.PurgeReplicaRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fs_tree_manager.PurgeReplicaRequest;
  return proto.fs_tree_manager.PurgeReplicaRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fs_tree_manager.PurgeReplicaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fs_tree_manager.PurgeReplicaRequest}
 */
proto.fs_tree_manager.PurgeReplicaRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fs_tree_manager.PurgeReplicaRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fs_tree_manager.PurgeReplicaRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fs_tree_manager.PurgeReplicaRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.PurgeReplicaRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.fs_tree_manager.PurgeReplicaRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fs_tree_manager.PurgeReplicaRequest} returns this
 */
proto.fs_tree_manager.PurgeReplicaRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fs_tree_manager.MerkleNode.prototype.toObject = function(opt_includeInstance) {
  return proto.fs_tree_manager.MerkleNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fs_tree_manager.MerkleNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.MerkleNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    merkleHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    childrenUuidsMap: (f = msg.getChildrenUuidsMap()) ? f.toObject(includeInstance, undefined) : [],
    parentUuid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    fsEntry: (f = msg.getFsEntry()) && proto.fs_tree_manager.FSEntry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fs_tree_manager.MerkleNode}
 */
proto.fs_tree_manager.MerkleNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fs_tree_manager.MerkleNode;
  return proto.fs_tree_manager.MerkleNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fs_tree_manager.MerkleNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fs_tree_manager.MerkleNode}
 */
proto.fs_tree_manager.MerkleNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMerkleHash(value);
      break;
    case 3:
      var value = msg.getChildrenUuidsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "", false);
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentUuid(value);
      break;
    case 5:
      var value = new proto.fs_tree_manager.FSEntry;
      reader.readMessage(value,proto.fs_tree_manager.FSEntry.deserializeBinaryFromReader);
      msg.setFsEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fs_tree_manager.MerkleNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fs_tree_manager.MerkleNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fs_tree_manager.MerkleNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.MerkleNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMerkleHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChildrenUuidsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getParentUuid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFsEntry();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.fs_tree_manager.FSEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.fs_tree_manager.MerkleNode.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fs_tree_manager.MerkleNode} returns this
 */
proto.fs_tree_manager.MerkleNode.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string merkle_hash = 2;
 * @return {string}
 */
proto.fs_tree_manager.MerkleNode.prototype.getMerkleHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fs_tree_manager.MerkleNode} returns this
 */
proto.fs_tree_manager.MerkleNode.prototype.setMerkleHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, bool> children_uuids = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.fs_tree_manager.MerkleNode.prototype.getChildrenUuidsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.fs_tree_manager.MerkleNode} returns this
 */
proto.fs_tree_manager.MerkleNode.prototype.clearChildrenUuidsMap = function() {
  this.getChildrenUuidsMap().clear();
  return this;};


/**
 * optional string parent_uuid = 4;
 * @return {string}
 */
proto.fs_tree_manager.MerkleNode.prototype.getParentUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.fs_tree_manager.MerkleNode} returns this
 */
proto.fs_tree_manager.MerkleNode.prototype.setParentUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional FSEntry fs_entry = 5;
 * @return {?proto.fs_tree_manager.FSEntry}
 */
proto.fs_tree_manager.MerkleNode.prototype.getFsEntry = function() {
  return /** @type{?proto.fs_tree_manager.FSEntry} */ (
    jspb.Message.getWrapperField(this, proto.fs_tree_manager.FSEntry, 5));
};


/**
 * @param {?proto.fs_tree_manager.FSEntry|undefined} value
 * @return {!proto.fs_tree_manager.MerkleNode} returns this
*/
proto.fs_tree_manager.MerkleNode.prototype.setFsEntry = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fs_tree_manager.MerkleNode} returns this
 */
proto.fs_tree_manager.MerkleNode.prototype.clearFsEntry = function() {
  return this.setFsEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fs_tree_manager.MerkleNode.prototype.hasFsEntry = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fs_tree_manager.MerkleTree.prototype.toObject = function(opt_includeInstance) {
  return proto.fs_tree_manager.MerkleTree.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fs_tree_manager.MerkleTree} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.MerkleTree.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootUuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nodesMap: (f = msg.getNodesMap()) ? f.toObject(includeInstance, proto.fs_tree_manager.MerkleNode.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fs_tree_manager.MerkleTree}
 */
proto.fs_tree_manager.MerkleTree.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fs_tree_manager.MerkleTree;
  return proto.fs_tree_manager.MerkleTree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fs_tree_manager.MerkleTree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fs_tree_manager.MerkleTree}
 */
proto.fs_tree_manager.MerkleTree.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootUuid(value);
      break;
    case 2:
      var value = msg.getNodesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.fs_tree_manager.MerkleNode.deserializeBinaryFromReader, "", new proto.fs_tree_manager.MerkleNode());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fs_tree_manager.MerkleTree.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fs_tree_manager.MerkleTree.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fs_tree_manager.MerkleTree} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.MerkleTree.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.fs_tree_manager.MerkleNode.serializeBinaryToWriter);
  }
};


/**
 * optional string root_uuid = 1;
 * @return {string}
 */
proto.fs_tree_manager.MerkleTree.prototype.getRootUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fs_tree_manager.MerkleTree} returns this
 */
proto.fs_tree_manager.MerkleTree.prototype.setRootUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, MerkleNode> nodes = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.fs_tree_manager.MerkleNode>}
 */
proto.fs_tree_manager.MerkleTree.prototype.getNodesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.fs_tree_manager.MerkleNode>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.fs_tree_manager.MerkleNode));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.fs_tree_manager.MerkleTree} returns this
 */
proto.fs_tree_manager.MerkleTree.prototype.clearNodesMap = function() {
  this.getNodesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fs_tree_manager.FSEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.fs_tree_manager.FSEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fs_tree_manager.FSEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.FSEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fs_tree_manager.FSEntry}
 */
proto.fs_tree_manager.FSEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fs_tree_manager.FSEntry;
  return proto.fs_tree_manager.FSEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fs_tree_manager.FSEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fs_tree_manager.FSEntry}
 */
proto.fs_tree_manager.FSEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fs_tree_manager.FSEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fs_tree_manager.FSEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fs_tree_manager.FSEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.FSEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Struct metadata = 1;
 * @return {?proto.google.protobuf.Struct}
 */
proto.fs_tree_manager.FSEntry.prototype.getMetadata = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 1));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.fs_tree_manager.FSEntry} returns this
*/
proto.fs_tree_manager.FSEntry.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fs_tree_manager.FSEntry} returns this
 */
proto.fs_tree_manager.FSEntry.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fs_tree_manager.FSEntry.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fs_tree_manager.PullRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fs_tree_manager.PullRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fs_tree_manager.PullRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fs_tree_manager.PullRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.PullRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pullRequestList: jspb.Message.toObjectList(msg.getPullRequestList(),
    proto.fs_tree_manager.PullRequestItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fs_tree_manager.PullRequest}
 */
proto.fs_tree_manager.PullRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fs_tree_manager.PullRequest;
  return proto.fs_tree_manager.PullRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fs_tree_manager.PullRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fs_tree_manager.PullRequest}
 */
proto.fs_tree_manager.PullRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 2:
      var value = new proto.fs_tree_manager.PullRequestItem;
      reader.readMessage(value,proto.fs_tree_manager.PullRequestItem.deserializeBinaryFromReader);
      msg.addPullRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fs_tree_manager.PullRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fs_tree_manager.PullRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fs_tree_manager.PullRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.PullRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPullRequestList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.fs_tree_manager.PullRequestItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.fs_tree_manager.PullRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fs_tree_manager.PullRequest} returns this
 */
proto.fs_tree_manager.PullRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated PullRequestItem pull_request = 2;
 * @return {!Array<!proto.fs_tree_manager.PullRequestItem>}
 */
proto.fs_tree_manager.PullRequest.prototype.getPullRequestList = function() {
  return /** @type{!Array<!proto.fs_tree_manager.PullRequestItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fs_tree_manager.PullRequestItem, 2));
};


/**
 * @param {!Array<!proto.fs_tree_manager.PullRequestItem>} value
 * @return {!proto.fs_tree_manager.PullRequest} returns this
*/
proto.fs_tree_manager.PullRequest.prototype.setPullRequestList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.fs_tree_manager.PullRequestItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fs_tree_manager.PullRequestItem}
 */
proto.fs_tree_manager.PullRequest.prototype.addPullRequest = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.fs_tree_manager.PullRequestItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fs_tree_manager.PullRequest} returns this
 */
proto.fs_tree_manager.PullRequest.prototype.clearPullRequestList = function() {
  return this.setPullRequestList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fs_tree_manager.PullRequestItem.prototype.toObject = function(opt_includeInstance) {
  return proto.fs_tree_manager.PullRequestItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fs_tree_manager.PullRequestItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.PullRequestItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    merkleHash: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fs_tree_manager.PullRequestItem}
 */
proto.fs_tree_manager.PullRequestItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fs_tree_manager.PullRequestItem;
  return proto.fs_tree_manager.PullRequestItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fs_tree_manager.PullRequestItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fs_tree_manager.PullRequestItem}
 */
proto.fs_tree_manager.PullRequestItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMerkleHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fs_tree_manager.PullRequestItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fs_tree_manager.PullRequestItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fs_tree_manager.PullRequestItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.PullRequestItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMerkleHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.fs_tree_manager.PullRequestItem.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fs_tree_manager.PullRequestItem} returns this
 */
proto.fs_tree_manager.PullRequestItem.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string merkle_hash = 2;
 * @return {string}
 */
proto.fs_tree_manager.PullRequestItem.prototype.getMerkleHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fs_tree_manager.PullRequestItem} returns this
 */
proto.fs_tree_manager.PullRequestItem.prototype.setMerkleHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fs_tree_manager.PushRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fs_tree_manager.PushRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fs_tree_manager.PushRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fs_tree_manager.PushRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.PushRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pushRequestList: jspb.Message.toObjectList(msg.getPushRequestList(),
    proto.fs_tree_manager.PushRequestItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fs_tree_manager.PushRequest}
 */
proto.fs_tree_manager.PushRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fs_tree_manager.PushRequest;
  return proto.fs_tree_manager.PushRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fs_tree_manager.PushRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fs_tree_manager.PushRequest}
 */
proto.fs_tree_manager.PushRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserId(value);
      break;
    case 2:
      var value = new proto.fs_tree_manager.PushRequestItem;
      reader.readMessage(value,proto.fs_tree_manager.PushRequestItem.deserializeBinaryFromReader);
      msg.addPushRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fs_tree_manager.PushRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fs_tree_manager.PushRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fs_tree_manager.PushRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.PushRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPushRequestList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.fs_tree_manager.PushRequestItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 user_id = 1;
 * @return {number}
 */
proto.fs_tree_manager.PushRequest.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.fs_tree_manager.PushRequest} returns this
 */
proto.fs_tree_manager.PushRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated PushRequestItem push_request = 2;
 * @return {!Array<!proto.fs_tree_manager.PushRequestItem>}
 */
proto.fs_tree_manager.PushRequest.prototype.getPushRequestList = function() {
  return /** @type{!Array<!proto.fs_tree_manager.PushRequestItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fs_tree_manager.PushRequestItem, 2));
};


/**
 * @param {!Array<!proto.fs_tree_manager.PushRequestItem>} value
 * @return {!proto.fs_tree_manager.PushRequest} returns this
*/
proto.fs_tree_manager.PushRequest.prototype.setPushRequestList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.fs_tree_manager.PushRequestItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fs_tree_manager.PushRequestItem}
 */
proto.fs_tree_manager.PushRequest.prototype.addPushRequest = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.fs_tree_manager.PushRequestItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fs_tree_manager.PushRequest} returns this
 */
proto.fs_tree_manager.PushRequest.prototype.clearPushRequestList = function() {
  return this.setPushRequestList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fs_tree_manager.PushRequestItem.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fs_tree_manager.PushRequestItem.prototype.toObject = function(opt_includeInstance) {
  return proto.fs_tree_manager.PushRequestItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fs_tree_manager.PushRequestItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.PushRequestItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    merkleHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fsEntry: (f = msg.getFsEntry()) && proto.fs_tree_manager.FSEntry.toObject(includeInstance, f),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.fs_tree_manager.PushRequestItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fs_tree_manager.PushRequestItem}
 */
proto.fs_tree_manager.PushRequestItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fs_tree_manager.PushRequestItem;
  return proto.fs_tree_manager.PushRequestItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fs_tree_manager.PushRequestItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fs_tree_manager.PushRequestItem}
 */
proto.fs_tree_manager.PushRequestItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMerkleHash(value);
      break;
    case 3:
      var value = new proto.fs_tree_manager.FSEntry;
      reader.readMessage(value,proto.fs_tree_manager.FSEntry.deserializeBinaryFromReader);
      msg.setFsEntry(value);
      break;
    case 4:
      var value = new proto.fs_tree_manager.PushRequestItem;
      reader.readMessage(value,proto.fs_tree_manager.PushRequestItem.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fs_tree_manager.PushRequestItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fs_tree_manager.PushRequestItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fs_tree_manager.PushRequestItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fs_tree_manager.PushRequestItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMerkleHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFsEntry();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.fs_tree_manager.FSEntry.serializeBinaryToWriter
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.fs_tree_manager.PushRequestItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.fs_tree_manager.PushRequestItem.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.fs_tree_manager.PushRequestItem} returns this
 */
proto.fs_tree_manager.PushRequestItem.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string merkle_hash = 2;
 * @return {string}
 */
proto.fs_tree_manager.PushRequestItem.prototype.getMerkleHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.fs_tree_manager.PushRequestItem} returns this
 */
proto.fs_tree_manager.PushRequestItem.prototype.setMerkleHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional FSEntry fs_entry = 3;
 * @return {?proto.fs_tree_manager.FSEntry}
 */
proto.fs_tree_manager.PushRequestItem.prototype.getFsEntry = function() {
  return /** @type{?proto.fs_tree_manager.FSEntry} */ (
    jspb.Message.getWrapperField(this, proto.fs_tree_manager.FSEntry, 3));
};


/**
 * @param {?proto.fs_tree_manager.FSEntry|undefined} value
 * @return {!proto.fs_tree_manager.PushRequestItem} returns this
*/
proto.fs_tree_manager.PushRequestItem.prototype.setFsEntry = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.fs_tree_manager.PushRequestItem} returns this
 */
proto.fs_tree_manager.PushRequestItem.prototype.clearFsEntry = function() {
  return this.setFsEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fs_tree_manager.PushRequestItem.prototype.hasFsEntry = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated PushRequestItem children = 4;
 * @return {!Array<!proto.fs_tree_manager.PushRequestItem>}
 */
proto.fs_tree_manager.PushRequestItem.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.fs_tree_manager.PushRequestItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fs_tree_manager.PushRequestItem, 4));
};


/**
 * @param {!Array<!proto.fs_tree_manager.PushRequestItem>} value
 * @return {!proto.fs_tree_manager.PushRequestItem} returns this
*/
proto.fs_tree_manager.PushRequestItem.prototype.setChildrenList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.fs_tree_manager.PushRequestItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fs_tree_manager.PushRequestItem}
 */
proto.fs_tree_manager.PushRequestItem.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.fs_tree_manager.PushRequestItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.fs_tree_manager.PushRequestItem} returns this
 */
proto.fs_tree_manager.PushRequestItem.prototype.clearChildrenList = function() {
  return this.setChildrenList([]);
};


goog.object.extend(exports, proto.fs_tree_manager);
