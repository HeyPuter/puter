// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.0
//   protoc               v3.21.12
// source: fsentry.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface FSEntry {
  uuid: string;
  name: string;
  path: string;
  parentUuid: string;
  isDir: boolean;
  created: number;
  modified: number;
  accessed: number;
  size: number;
}

function createBaseFSEntry(): FSEntry {
  return { uuid: "", name: "", path: "", parentUuid: "", isDir: false, created: 0, modified: 0, accessed: 0, size: 0 };
}

export const FSEntry: MessageFns<FSEntry> = {
  encode(message: FSEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    if (message.parentUuid !== "") {
      writer.uint32(34).string(message.parentUuid);
    }
    if (message.isDir !== false) {
      writer.uint32(40).bool(message.isDir);
    }
    if (message.created !== 0) {
      writer.uint32(48).int64(message.created);
    }
    if (message.modified !== 0) {
      writer.uint32(56).int64(message.modified);
    }
    if (message.accessed !== 0) {
      writer.uint32(64).int64(message.accessed);
    }
    if (message.size !== 0) {
      writer.uint32(72).int64(message.size);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FSEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFSEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.parentUuid = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isDir = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.created = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.modified = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.accessed = longToNumber(reader.int64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.size = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FSEntry {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      parentUuid: isSet(object.parentUuid) ? globalThis.String(object.parentUuid) : "",
      isDir: isSet(object.isDir) ? globalThis.Boolean(object.isDir) : false,
      created: isSet(object.created) ? globalThis.Number(object.created) : 0,
      modified: isSet(object.modified) ? globalThis.Number(object.modified) : 0,
      accessed: isSet(object.accessed) ? globalThis.Number(object.accessed) : 0,
      size: isSet(object.size) ? globalThis.Number(object.size) : 0,
    };
  },

  toJSON(message: FSEntry): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.parentUuid !== "") {
      obj.parentUuid = message.parentUuid;
    }
    if (message.isDir !== false) {
      obj.isDir = message.isDir;
    }
    if (message.created !== 0) {
      obj.created = Math.round(message.created);
    }
    if (message.modified !== 0) {
      obj.modified = Math.round(message.modified);
    }
    if (message.accessed !== 0) {
      obj.accessed = Math.round(message.accessed);
    }
    if (message.size !== 0) {
      obj.size = Math.round(message.size);
    }
    return obj;
  },

  create(base?: DeepPartial<FSEntry>): FSEntry {
    return FSEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FSEntry>): FSEntry {
    const message = createBaseFSEntry();
    message.uuid = object.uuid ?? "";
    message.name = object.name ?? "";
    message.path = object.path ?? "";
    message.parentUuid = object.parentUuid ?? "";
    message.isDir = object.isDir ?? false;
    message.created = object.created ?? 0;
    message.modified = object.modified ?? 0;
    message.accessed = object.accessed ?? 0;
    message.size = object.size ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
